// ------ Definición de pines ------
const int botonPin = 2;  // Pin donde está el botón
const int segmentos[] = {3, 4, 5, 6, 7, 8, 9}; // Pines para los segmentos a, b, c, d, e, f, g

// ------ Variables de control ------
int estadoBoton = 0;  // Para saber si el botón está presionado
int contador = 0;     // Para llevar la cuenta del número que se muestra (0 a 9)

// Tabla de qué segmentos se encienden para cada número (0 a 9)
// Cada posición del array indica si el segmento está encendido (1) o apagado (0)
const int numeros[10][7] = {
  {1, 1, 1, 1, 1, 1, 0},  // 0
  {0, 1, 1, 0, 0, 0, 0},  // 1
  {1, 1, 0, 1, 1, 0, 1},  // 2
  {1, 1, 1, 1, 0, 0, 1},  // 3
  {0, 1, 1, 0, 0, 1, 1},  // 4
  {1, 0, 1, 1, 0, 1, 1},  // 5
  {1, 0, 1, 1, 1, 1, 1},  // 6
  {1, 1, 1, 0, 0, 0, 0},  // 7
  {1, 1, 1, 1, 1, 1, 1},  // 8
  {1, 1, 1, 1, 0, 1, 1}   // 9
};

void setup() {
  // Configurar el botón como entrada (con pull-down)
  pinMode(botonPin, INPUT);
  
  // Configurar los pines de los segmentos como salida
  for (int i = 0; i < 7; i++) {
    pinMode(segmentos[i], OUTPUT);
  }
}

void loop() {
  // Leer si el botón está presionado o no
  estadoBoton = digitalRead(botonPin);

  if (estadoBoton == HIGH) {
    // Si el botón está presionado, contar hacia arriba
    contador++;
    if (contador > 9) {
      contador = 0; // Cuando llegue a 9, vuelve a 0
    }
    mostrarNumero(contador); // Mostrar el número en el display
    delay(500); // Esperar medio segundo antes de avanzar al siguiente número
  } else {
    // Si el botón NO está presionado, solo mostrar el número actual (sin contar)
    mostrarNumero(contador);
  }
}

/**
 * Mostrar un número en el display de 7 segmentos
 * @param numero Número que se quiere mostrar (0 a 9)
 */
void mostrarNumero(int numero) {
  // Revisar cada segmento (a, b, c, d, e, f, g) para ver si debe encenderse
  for (int i = 0; i < 7; i++) {
    digitalWrite(segmentos[i], numeros[numero][i]); // Encender o apagar el segmento
  }
}
